import fs from "node:fs/promises";

/**
 * @param {string} s
 */
function* scrapeElements(s) {
  const pattern = /{{\s*HTMLElement\("(\w+)"\)\s*}}/;
  let pos = 0;
  while (true) {
    const match = pattern.exec(s.slice(pos));
    if (!match) {
      break;
    }

    pos += match.index + match[0].length;
    yield match[1];
  }
}

/**
 * @param {string} s
 */
function* scrapeElementTags(s) {
  const pattern = /`<(\w+)>`/;
  let pos = 0;
  while (true) {
    const match = pattern.exec(s.slice(pos));
    if (!match) {
      break;
    }

    pos += match.index + match[0].length;
    yield match[1];
  }
}

const attrElems = Object.fromEntries(
  (
    await (
      await fetch(
        "https://raw.githubusercontent.com/mdn/content/main/files/en-us/web/html/attributes/index.md",
      )
    ).text()
  )
    .split(/<td>[\s\n]+<code>/)
    .slice(1)
    .map((s) => s.split("</tr>")[0])
    .map((s) => [
      s.match(/([^><]+)(?:<\/a>)?<\/code>/)[1],
      Array.from(scrapeElements(s)),
    ]),
);

const elemAttrs = Object.entries(attrElems).reduce((result, [attr, elems]) => {
  for (const elem of elems) {
    if (!(elem in result)) {
      result[elem] = [];
    }

    result[elem].push(attr);
  }

  return result;
}, {});

console.log(elemAttrs);

const elemsmd = await (
  await fetch(
    "https://raw.githubusercontent.com/mdn/content/main/files/en-us/web/html/element/index.md",
  )
).text();

const elems = Array.from(
  new Set([...scrapeElements(elemsmd), ...scrapeElementTags(elemsmd)]),
).sort();

fs.writeFile(
  "jsx/intrinsics.d.ts",
  `/* DO NOT EDIT THIS FILE. This file is generated by scripts/generate-intrinsics.js */

declare namespace JSX {
  interface IntrinsicElements {
    ${elems
      .map(
        (elem) =>
          `${elem}: HtmlGlobalAttributes${
            elemAttrs[elem]
              ? ` & {
      ${elemAttrs[elem].map((attr) => `${attr.match(/[^\w]/) ? JSON.stringify(attr) : attr}?: any;`).join("\n      ")}
    }`
              : ""
          };`,
      )
      .join("\n    ")}
  }
}
`,
);

const voidelems = Array.from(
  scrapeElements(
    await (
      await fetch(
        "https://raw.githubusercontent.com/mdn/content/main/files/en-us/glossary/void_element/index.md",
      )
    ).text(),
  ),
);

fs.writeFile(
  "intrinsics.ts",
  `/* DO NOT EDIT THIS FILE. This file is generated by scripts/generate-intrinsics.js */

export type VoidElem = ${voidelems.map((elem) => `"${elem}"`).join(" | ")};

export function isVoidElem(name: string): name is VoidElem {
  switch (name) {
    ${voidelems.map((elem) => `case "${elem}":`).join("\n    ")}
      return true;
  }

  return false;
}
`,
);
